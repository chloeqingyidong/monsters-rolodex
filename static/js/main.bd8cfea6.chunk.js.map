{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monsters","id","name","skill1","skill2","skill3","CardList","map","monster","card_component_Card","key","SearchBox","_ref","placeHolder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","bind","assertThisInitialized","e","setState","target","value","_this$state","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAIaA,qBAAO,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,IAAG,wBAAAC,OAA0BP,EAAMQ,SAASC,GAAzC,4BACvBR,EAAAC,EAAAC,cAAA,cAAOH,EAAMQ,SAASE,KAAtB,KACAT,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,cAAOH,EAAMQ,SAASG,OAAtB,KACAV,EAAAC,EAAAC,cAAA,cAAOH,EAAMQ,SAASI,OAAtB,KACAX,EAAAC,EAAAC,cAAA,cAAOH,EAAMQ,SAASK,OAAtB,SCLCC,EAAW,SAAAd,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACXJ,EAAMQ,SAASO,IAAI,SAAAC,GAAO,OACvBf,EAAAC,EAAAC,cAACc,EAAD,CAAMC,IAAQF,EAAQP,GAAKD,SAAaQ,QCLvCG,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAcC,EAAjBF,EAAiBE,aAAjB,OACrBrB,EAAAC,EAAAC,cAAA,SACIoB,KAAK,SACLnB,UAAU,SACViB,YAAcA,EACdG,SAAWF,MCuFJG,cA1Fb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXzB,SAAU,CACR,CACEE,KAAM,2BACND,GAAI,EACJE,OAAQ,0EACRC,OAAQ,yKAEV,CACEF,KAAM,2BACND,GAAI,EACJE,OAAQ,gLACRC,OAAQ,iGAEV,CACEF,KAAM,mCACND,GAAI,EACJE,OAAQ,iFACRC,OAAQ,2GAUV,CACEF,KAAM,0CACND,GAAI,EACJE,OAAQ,kEACRC,OAAQ,gJAEV,CACEF,KAAM,qCACND,GAAI,EACJE,OAAQ,6KACRC,OAAQ,2DACRC,OAAQ,gKAEV,CACEH,KAAM,2CACND,GAAI,EACJE,OAAQ,SACRC,OAAQ,WAGZsB,YAAY,IAGdR,EAAKJ,aAAeI,EAAKJ,aAAaa,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IAtDRA,yHAiEDW,GACXR,KAAKS,SAAS,CAAEJ,YAAaG,EAAEE,OAAOC,yCAGhC,IAAAC,EAC2BZ,KAAKI,MAA9BzB,EADFiC,EACEjC,SAAS0B,EADXO,EACWP,YAEXQ,EAAmBlC,EAASmC,OAAO,SAAA3B,GAAO,OAC9CA,EAAQN,KAAKkC,cAAcC,SAASX,EAAYY,uBAGlD,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACE1B,YAAa,kBACbC,aAAeO,KAAKP,eAEtBrB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUxC,SAAWkC,YApFXO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd8cfea6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className = 'card-container'>\n        <img alt='monsters' src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`} />\n        <h2> { props.monsters.name } </h2>\n        <p>\n            <h4> { props.monsters.skill1 } </h4>\n            <h4> { props.monsters.skill2 } </h4>\n            <h4> { props.monsters.skill3 } </h4>\n        </p>\n    </div>\n)\n","import React from 'react';\n\nimport './card-list.styles.css';\n\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n    <div className= 'card-list'>\n        {props.monsters.map(monster => (\n            <Card key = { monster.id } monsters = { monster } />\n        ))}\n    </div>\n);\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeHolder , handleChange }) => (\n    <input \n        type='search' \n        className='search'\n        placeHolder={ placeHolder } \n        onChange={ handleChange }\n    />\n);\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [\n        {\n          name: 'Memory Game (04-06/2019)',\n          id: 1,\n          skill1: '· built a complete browser-based card matching game using JavaScript',\n          skill2: '· designed and implemented matching logic, winning condition (e.g. congratulations popup), and functionality like restart button, star rating, timer, move counter'\n        },\n        {\n          name: 'Arcade Game (05-07/2019)',\n          id: 2,\n          skill1: '· applied JavaScript object-oriented programming features to recreate the classic arcade game by creating the key interactive objects including player and enemy instances',\n          skill2: '· ensured the error-free game functionality, e.g. Vehicle-player collision resets the game'\n        },\n        {\n          name: 'Feed Reader Testing (06-07/2019)',\n          id: 3,\n          skill1: '· wrote a number of tests against a pre-existing web-based app with Jasmine',\n          skill2: '· tested the underlying business logic of the app as well as the event handling and DOM manipulation'\n        },\n        /*\n        {\n          name: 'SPA -- What are you interested in today? (07/2019)',\n          id: 4,\n          skill1: 'skill1',\n          skill2: 'skill2'\n        },\n        */\n        {\n          name: 'REACT App -- Monsters Rolodex (07/2019)',\n          id: 5,\n          skill1: '· built a SPA using Create React App, IDE, Bash, NodeJS, NPM',\n          skill2: '· implemented cards with monsters in that have my recent projects and a search box to filter out the monsters with CSS3, JavaScript, JSON'\n        },\n        {\n          name: 'Restaurant Review App (07-08/2019)',\n          id: 6,\n          skill1: '· converted a static webpage to a mobile-ready web application that is responsive on different sized displays and accessible for screen reader use, using CSS framework',\n          skill2: '· implemented accessibility features in the site HTML',\n          skill3: '· enhanced the application to a Progressive Web Application by adding a Service Worker script to cache all of the site’s assets for user offline use'\n        },\n        {\n          name: 'E-commerce Platform (REACT) (08-present)',\n          id: 7,\n          skill1: 'skill1',\n          skill2: 'skill2'\n        }\n      ],\n      searchField:''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n\n  }\n  \n  componentDidMount() {\n    //fetch('https://jsonplaceholder.typicode.com/users')\n      //.then(response => response.json())\n      //.then(users => this.setState({ monsters: users }));\n  }\n\n\n  handleChange(e){\n    this.setState({ searchField: e.target.value });\n  }\n\n  render(){\n    const { monsters,searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Qingyi Dong's Monsters Rolodex</h1>\n        <SearchBox\n          placeHolder= 'search monsters'\n          handleChange= {this.handleChange}\n        />\n        <CardList monsters={ filteredMonsters }/>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}